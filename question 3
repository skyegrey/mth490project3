
import pandas

# Distance metric
def euclidean_distance(x_data, y_data, x_cluster, y_cluster):
    squared_distance = (x_data - x_cluster)**2 + (y_data - y_cluster)**2
    return squared_distance**.5

# Getting the data  
target_data_frame = pandas.read_excel('Target.xlsx')
data_array = target_data_frame.as_matrix()

# Converting the array to a list so I can use append
data = data_array.tolist()



def k_means(data): 

    iterations = 0
    
    # Initial starting points
    cluster1 = [2,2]
    cluster2 = [-2,0]
    new_cluster1 = ''
    new_cluster2 = ''
    
    NoChange = False
    
    # while loop runs until no change
    while not NoChange:
        
        iterations += 1
        
        # Classifying each point as cluster1 or cluster2
        for i in data:
            
            x_data = i[0]
            y_data = i[1]
            
            distance1 = euclidean_distance(x_data,y_data,cluster1[0],cluster1[1])
            distance2 = euclidean_distance(x_data,y_data,cluster2[0],cluster2[1])
            
            if distance1 < distance2:
                i.append('cluster1')
                
            if distance2 < distance1:
                i.append('cluster2')
        
        # Start an empty list to average all points classified to each cluster
        new_cluster1 = [0,0]
        new_cluster2 = [0,0]
        counter_1 = 0
        counter_2 = 0
        
        # Averaging the points
        for i in data:
            if i[3] == 'cluster1':
                new_cluster1[0] += i[0]
                new_cluster1[1] += i[1]
                counter_1 += 1
        
            if i[3] == 'cluster2':
                new_cluster2[0] += i[0]
                new_cluster2[1] += i[1]
                counter_2 += 1
        
        new_cluster1[0] = float(new_cluster1[0])
        new_cluster1[1] = float(new_cluster1[1])
        new_cluster2[0] = float(new_cluster2[0])
        new_cluster2[1] = float(new_cluster2[1])
        
        new_cluster1[0] = new_cluster1[0] / counter_1
        new_cluster1[1] = new_cluster1[1] / counter_1
        new_cluster2[0] = new_cluster2[0] / counter_2
        new_cluster2[1] = new_cluster2[1] / counter_2
        

        # Check if there was a change
        if cluster1[0] - new_cluster1[0] == 0:
            if cluster1[1] - new_cluster1[1] == 0:
                if cluster2[0] - new_cluster2[0] == 0:
                    if cluster2[1] - new_cluster2[1] == 0:
                        NoChange = True
        
        #Reassign the new cluster
        cluster1 = new_cluster1
        cluster2 = new_cluster2
    
    
    print("Number of iterations:")
    print(iterations)
    print("")
    print("Clusters are:")
    print(cluster1)
    print(cluster2)


k_means(data)
